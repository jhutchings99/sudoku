Client/server architechture
    one app consits of 2 programs centralizing data and univerally accesable
    developers have control
    3 tier application
        client
        server
        database

HTTP
    request - method and path Important for rest, with headers and body, FIRST
    response - 200-okay 201-created 400-bad request(malformed) 404-notFound 401-unathenticated
    403-Forbidden(unauthorized) 422-unprossisble(vaidation failed) 500-server error

REST
    rest is guidelines (rules) way to create web app 
    ineroperablity - got all ingredents
    Resources (collections members)
    method/verb get, post, put, delete
    get - retrive 
    post - create
    put - replace / update
    delete - delete
    collection: /restraunts/123
    path noun, method is verb
    ineroperablity between webapps
    review - read about it

DataBase
    tables with rows- instance/member 
    columns - attribute/ feilds
    sqlite - low traffic enviormemt, light weight - mobile devices, local, small scale
    postgress/mySQL - high traffic, large user enviormemt, largeDataSets (millions)

CORS
    cors is the exceptions to same origin policy
    same origin policy - server that originated the client code, you can talk to home but not to other
            origin, apple
            /- can talk to here
    computer
            \ - apple cant talk here CORS says it is okay
            google
    cookie security
    Cross origin resource - google will decide to imprement CORS
    prefilgight - asking for permission
    preflighted - make sure you check preflight request
    put, delete requires 
    options method is the preflight request

Cookies, passwords authentication authorization
    registartion - encrypt
    login - encrypt again check
    sessions - time user is on the app (typically logged in)
    session data - track info between request
            the way to track though cookies
    cookies - data get sent back and forth browser is saving the session id 
    cookies is required because http is stateless
    session id is meaningless information
    meaningless so user wont change seesion id
    in server
    in session data
                        database  
                        /
    clinent - > server
    cookies      session data
    |                   sessionID=>userID->database
    sessionID
    
    for secruity and orginsation
    Passwords/encryptions - nobody has access to passwords
        security
        users tend to save passwords with everything else so if a hacker gets in they have access to other things too
        one way encryption - passwords
        two way encryption - gmail, imessage
        encrypt save, encrypt compare
        pre compute, rainbow table - saltting solves this problem by adding stuff
        we save salt so it makes haker take long time
        authenticate - type in credentials, compare againsts database user, verify password, check if match
        authorization - think through it.

Deployment
    know the catigories catigories
    heroku know how to use python
    easy
    advantages and disavantiges

DOM, Async/Ajax
    dom - powerful tool
    bulidng a user interface
    it allows for dynamic ui 
    rigid to move aroud and change things base on what the user does
    DOM - document object modle
    Ajax - function to make an asyncness request to server
    this is important so we dont have to wait for the letter to come back
    continue to let the user to be interactive
    fetch is what we use
    ancyncreness - not together in time
    syncreness - phone call
    asyncness - text
        


    
